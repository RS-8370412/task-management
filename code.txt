I have made a project on Task Management System.

Folder_1: config
    
File_1: config.go
package config

import (
    "fmt"
    "os"
    "github.com/joho/godotenv"
)

type Config struct {
    SendGridAPIKey      string
    ExchangeRateAPIKey  string
    DBUser             string
    DBPassword         string
    DBHost             string
    DBPort             string
    DBName             string
}

func LoadConfig() (*Config, error) {
    err := godotenv.Load()
    if err != nil {
        return nil, err
    }

    return &Config{
        SendGridAPIKey:     os.Getenv("SENDGRID_API_KEY"),
        ExchangeRateAPIKey: os.Getenv("EXCHANGERATE_API_KEY"),
        DBUser:            os.Getenv("DB_USER"),
        DBPassword:        os.Getenv("DB_PASSWORD"),
        DBHost:            os.Getenv("DB_HOST"),
        DBPort:            os.Getenv("DB_PORT"),
        DBName:            os.Getenv("DB_NAME"),
    }, nil
}

func (c *Config) GetDBConnString() string {
    return fmt.Sprintf("%s:%s@tcp(%s:%s)/%s?parseTime=true", 
        c.DBUser, c.DBPassword, c.DBHost, c.DBPort, c.DBName)
}

Folder_2: database.go

File_2: database.go
package database

import (
    "database/sql"
    _ "github.com/go-sql-driver/mysql"
)

func InitDB(connStr string) (*sql.DB, error) {
    db, err := sql.Open("mysql", connStr)
    if err != nil {
        return nil, err
    }

    err = db.Ping()
    if err != nil {
        return nil, err
    }

    // Create tasks table if it doesn't exist
    _, err = db.Exec(`
        CREATE TABLE IF NOT EXISTS tasks (
            id INT AUTO_INCREMENT PRIMARY KEY,
            title VARCHAR(255) NOT NULL,
            description TEXT,
            status VARCHAR(50) DEFAULT 'pending',
            due_date DATETIME,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
            cost DECIMAL(10,2),
            currency VARCHAR(3)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
    `)

    return db, err
}

Folder_3: handlers

File_3: task_handler.go
package handlers

import (
    "encoding/json"
    "net/http"
    "strconv"
    "fmt"
    "time"
    "task-management/models"
    "task-management/services"
    "github.com/gorilla/mux"
)

type TaskHandler struct {
    taskService     *services.TaskService
    emailService    *services.EmailService
    exchangeService *services.ExchangeService
}

func NewTaskHandler(ts *services.TaskService, es *services.EmailService, xs *services.ExchangeService) *TaskHandler {
    return &TaskHandler{
        taskService:     ts,
        emailService:    es,
        exchangeService: xs,
    }
}

// Home handler for root endpoint
func (h *TaskHandler) Home(w http.ResponseWriter, r *http.Request) {
    message := map[string]string{
        "message": "Welcome to Task Management API",
        "version": "1.0",
        "status": "running",
    }
    json.NewEncoder(w).Encode(message)
}

// CreateTask - Create a new task
func (h *TaskHandler) CreateTask(w http.ResponseWriter, r *http.Request) {
    var task models.TaskCreate
    if err := json.NewDecoder(r.Body).Decode(&task); err != nil {
        http.Error(w, err.Error(), http.StatusBadRequest)
        return
    }

    id, err := h.taskService.CreateTask(task)
    if err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
        return
    }

    // Send email notification
    err = h.emailService.SendTaskNotification(
        "rupesh.singh.8370412@gmail.com",
        "New Task Created",
        fmt.Sprintf("New task created: %s", task.Title),
    )
    if err != nil {
        fmt.Printf("Failed to send email: %v\n", err)
    }

    w.WriteHeader(http.StatusCreated)
    json.NewEncoder(w).Encode(map[string]interface{}{
        "id": id,
        "message": "Task created successfully",
    })
}

// GetTasks - Get all tasks with optional filtering
func (h *TaskHandler) GetTasks(w http.ResponseWriter, r *http.Request) {
    status := r.URL.Query().Get("status")
    dueDate := r.URL.Query().Get("due_date")
    
    tasks, err := h.taskService.GetTasks()
    if err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
        return
    }

    // Filter by status if provided
    if status != "" {
        filteredTasks := []models.Task{}
        for _, task := range tasks {
            if task.Status == status {
                filteredTasks = append(filteredTasks, task)
            }
        }
        tasks = filteredTasks
    }

    // Filter by due date if provided
    if dueDate != "" {
        date, err := time.Parse("2006-01-02", dueDate)
        if err == nil {
            filteredTasks := []models.Task{}
            for _, task := range tasks {
                if task.DueDate.Format("2006-01-02") == date.Format("2006-01-02") {
                    filteredTasks = append(filteredTasks, task)
                }
            }
            tasks = filteredTasks
        }
    }

    // Handle currency conversion if requested
    targetCurrency := r.URL.Query().Get("currency")
    if targetCurrency != "" {
        for i := range tasks {
            convertedCost, err := h.exchangeService.ConvertCurrency(
                tasks[i].Cost,
                tasks[i].Currency,
                targetCurrency,
            )
            if err != nil {
                http.Error(w, err.Error(), http.StatusInternalServerError)
                return
            }
            tasks[i].Cost = convertedCost
            tasks[i].Currency = targetCurrency
        }
    }

    json.NewEncoder(w).Encode(tasks)
}

// GetTaskByID - Get a specific task by ID
func (h *TaskHandler) GetTaskByID(w http.ResponseWriter, r *http.Request) {
    vars := mux.Vars(r)
    id, err := strconv.Atoi(vars["id"])
    if err != nil {
        http.Error(w, "Invalid task ID", http.StatusBadRequest)
        return
    }

    task, err := h.taskService.GetTaskByID(id)
    if err != nil {
        http.Error(w, err.Error(), http.StatusNotFound)
        return
    }

    json.NewEncoder(w).Encode(task)
}

// UpdateTask - Update task details
func (h *TaskHandler) UpdateTask(w http.ResponseWriter, r *http.Request) {
    vars := mux.Vars(r)
    id, err := strconv.Atoi(vars["id"])
    if err != nil {
        http.Error(w, "Invalid task ID", http.StatusBadRequest)
        return
    }

    var task models.TaskUpdate
    if err := json.NewDecoder(r.Body).Decode(&task); err != nil {
        http.Error(w, err.Error(), http.StatusBadRequest)
        return
    }

    err = h.taskService.UpdateTask(id, task)
    if err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
        return
    }

    w.WriteHeader(http.StatusOK)
    json.NewEncoder(w).Encode(map[string]string{"message": "Task updated successfully"})
}

// DeleteTask - Delete a task
func (h *TaskHandler) DeleteTask(w http.ResponseWriter, r *http.Request) {
    vars := mux.Vars(r)
    id, err := strconv.Atoi(vars["id"])
    if err != nil {
        http.Error(w, "Invalid task ID", http.StatusBadRequest)
        return
    }

    err = h.taskService.DeleteTask(id)
    if err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
        return
    }

    w.WriteHeader(http.StatusOK)
    json.NewEncoder(w).Encode(map[string]string{"message": "Task deleted successfully"})
}

// UpdateTaskStatus - Update task status
func (h *TaskHandler) UpdateTaskStatus(w http.ResponseWriter, r *http.Request) {
    vars := mux.Vars(r)
    id, err := strconv.Atoi(vars["id"])
    if err != nil {
        http.Error(w, "Invalid task ID", http.StatusBadRequest)
        return
    }

    var update struct {
        Status string `json:"status"`
    }
    if err := json.NewDecoder(r.Body).Decode(&update); err != nil {
        http.Error(w, err.Error(), http.StatusBadRequest)
        return
    }

    if err := h.taskService.UpdateTaskStatus(id, update.Status); err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
        return
    }

    // Send email notification
    err = h.emailService.SendTaskNotification(
        "rupesh.singh.8370412@gmail.com",
        "Task Status Updated",
        fmt.Sprintf("Task %d status updated to: %s", id, update.Status),
    )
    if err != nil {
        fmt.Printf("Failed to send email: %v\n", err)
    }

    w.WriteHeader(http.StatusOK)
    json.NewEncoder(w).Encode(map[string]string{"message": "Task status updated successfully"})
}

func (h *TaskHandler) SearchTasks(w http.ResponseWriter, r *http.Request) {
    keyword := r.URL.Query().Get("q")
    if keyword == "" {
        http.Error(w, "Keyword is required", http.StatusBadRequest)
        return
    }

    tasks, err := h.taskService.SearchTasks(keyword)
    if err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
        return
    }

    w.Header().Set("Content-Type", "application/json")
    json.NewEncoder(w).Encode(tasks)
}

func (h *TaskHandler) ExportTasks(w http.ResponseWriter, r *http.Request) {
    csvData, err := h.taskService.ExportTasks()
    if err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
        return
    }

    w.Header().Set("Content-Type", "text/csv")
    w.Header().Set("Content-Disposition", "attachment; filename=tasks.csv")
    w.Write(csvData)
}

func (h *TaskHandler) BulkDeleteTasks(w http.ResponseWriter, r *http.Request) {
    var ids []int
    if err := json.NewDecoder(r.Body).Decode(&ids); err != nil {
        http.Error(w, "Invalid request body", http.StatusBadRequest)
        return
    }

    if len(ids) == 0 {
        http.Error(w, "No task IDs provided", http.StatusBadRequest)
        return
    }

    if err := h.taskService.BulkDeleteTasks(ids); err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
        return
    }

    w.WriteHeader(http.StatusOK)
    json.NewEncoder(w).Encode(map[string]string{"message": "Tasks deleted successfully"})
}

Folder_4: models

File_4: task.go
package models

import (
    "time"
)

type Task struct {
    ID          int       `json:"id"`
    Title       string    `json:"title"`
    Description string    `json:"description"`
    Status      string    `json:"status"`
    DueDate     time.Time `json:"due_date"`
    CreatedAt   time.Time `json:"created_at"`
    UpdatedAt   time.Time `json:"updated_at"`
    Cost        float64   `json:"cost"`
    Currency    string    `json:"currency"`
}

type TaskCreate struct {
    Title       string    `json:"title"`
    Description string    `json:"description"`
    DueDate     time.Time `json:"due_date"`
    Cost        float64   `json:"cost"`
    Currency    string    `json:"currency"`
}

type TaskUpdate struct {
    Title       *string    `json:"title,omitempty"`
    Description *string    `json:"description,omitempty"`
    Status      *string    `json:"status,omitempty"`
    DueDate     *time.Time `json:"due_date,omitempty"`
    Cost        *float64   `json:"cost,omitempty"`
    Currency    *string    `json:"currency,omitempty"`
}

Folder_5: services: it has 3 files: email_service.go, exchange_service.go, task_service.go 

File_5: email_service.go
package services

import (
    "log"
    "github.com/sendgrid/sendgrid-go"
    "github.com/sendgrid/sendgrid-go/helpers/mail"
)

type EmailService struct {
    client *sendgrid.Client
}

func NewEmailService(apiKey string) *EmailService {
    return &EmailService{
        client: sendgrid.NewSendClient(apiKey),
    }
}

func (s *EmailService) SendTaskNotification(to, subject, content string) error {
    from := mail.NewEmail("Task Manager", "rupesh.singh.8370412@gmail.com")
    recipient := mail.NewEmail("User", to)
    message := mail.NewSingleEmail(from, subject, recipient, content, content)
    
    response, err := s.client.Send(message)
    if err != nil {
        log.Printf("Failed to send email: %v\n", err)
        return err
    }

    // Log the SendGrid response
    log.Printf("Email sent to %s. Response: %v\n", to, response)
    return nil
}

File_6: exchange_service.go
package services

import (
    "encoding/json"
    "fmt"
    "net/http"
)

type ExchangeService struct {
    apiKey string
}

func NewExchangeService(apiKey string) *ExchangeService {
    return &ExchangeService{apiKey: apiKey}
}

type ExchangeResponse struct {
    Success bool               `json:"success"`
    Rates   map[string]float64 `json:"rates"`
}

func (s *ExchangeService) ConvertCurrency(amount float64, from, to string) (float64, error) {
    url := fmt.Sprintf("https://api.exchangerate-api.com/v4/latest/%s?access_key=%s", from, s.apiKey)
    
    resp, err := http.Get(url)
    if err != nil {
        return 0, err
    }
    defer resp.Body.Close()

    var result ExchangeResponse
    if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
        return 0, err
    }

    if rate, ok := result.Rates[to]; ok {
        return amount * rate, nil
    }
    return 0, fmt.Errorf("currency conversion not available")
}

File_7: task_service.go
package services

import (
    "log"
    "bytes"
    "encoding/csv"
    "strconv"
    "fmt"
    "database/sql"
    "errors"
    "task-management/models"
)

type TaskService struct {
    db *sql.DB
}

func NewTaskService(db *sql.DB) *TaskService {
    return &TaskService{db: db}
}

func (s *TaskService) CreateTask(task models.TaskCreate) (int64, error) {
    result, err := s.db.Exec(`
        INSERT INTO tasks (title, description, due_date, cost, currency)
        VALUES (?, ?, ?, ?, ?)`,
        task.Title, task.Description, task.DueDate, task.Cost, task.Currency,
    )
    if err != nil {
        return 0, err
    }
    
    return result.LastInsertId()
}

func (s *TaskService) GetTasks() ([]models.Task, error) {
    rows, err := s.db.Query(`
        SELECT id, title, description, status, due_date, created_at, updated_at, cost, currency
        FROM tasks
    `)
    if err != nil {
        return nil, err
    }
    defer rows.Close()

    var tasks []models.Task
    for rows.Next() {
        var task models.Task
        err := rows.Scan(
            &task.ID, &task.Title, &task.Description, &task.Status,
            &task.DueDate, &task.CreatedAt, &task.UpdatedAt, &task.Cost, &task.Currency,
        )
        if err != nil {
            return nil, err
        }
        tasks = append(tasks, task)
    }
    return tasks, nil
}

func (s *TaskService) GetTaskByID(id int) (*models.Task, error) {
    var task models.Task
    err := s.db.QueryRow(`
        SELECT id, title, description, status, due_date, created_at, updated_at, cost, currency
        FROM tasks
        WHERE id = ?`,
        id,
    ).Scan(
        &task.ID, &task.Title, &task.Description, &task.Status,
        &task.DueDate, &task.CreatedAt, &task.UpdatedAt, &task.Cost, &task.Currency,
    )
    
    if err == sql.ErrNoRows {
        return nil, errors.New("task not found")
    }
    if err != nil {
        return nil, err
    }
    
    return &task, nil
}

func (s *TaskService) UpdateTask(id int, update models.TaskUpdate) error {
    // Get existing task
    existingTask, err := s.GetTaskByID(id)
    if err != nil {
        return err
    }

    // Update fields if provided
    if update.Title != nil {
        existingTask.Title = *update.Title
    }
    if update.Description != nil {
        existingTask.Description = *update.Description
    }
    if update.Status != nil {
        existingTask.Status = *update.Status
    }
    if update.DueDate != nil {
        existingTask.DueDate = *update.DueDate
    }
    if update.Cost != nil {
        existingTask.Cost = *update.Cost
    }
    if update.Currency != nil {
        existingTask.Currency = *update.Currency
    }

    // Update in database
    _, err = s.db.Exec(`
        UPDATE tasks 
        SET title = ?, description = ?, status = ?, due_date = ?, cost = ?, currency = ?
        WHERE id = ?`,
        existingTask.Title, existingTask.Description, existingTask.Status,
        existingTask.DueDate, existingTask.Cost, existingTask.Currency, id,
    )
    return err
}

func (s *TaskService) UpdateTaskStatus(id int, status string) error {
    _, err := s.db.Exec(`
        UPDATE tasks 
        SET status = ?
        WHERE id = ?`,
        status, id,
    )
    return err
}

func (s *TaskService) DeleteTask(id int) error {
    result, err := s.db.Exec(`
        DELETE FROM tasks
        WHERE id = ?`,
        id,
    )
    if err != nil {
        return err
    }

    rowsAffected, err := result.RowsAffected()
    if err != nil {
        return err
    }

    if rowsAffected == 0 {
        return errors.New("task not found")
    }

    return nil
}

func (s *TaskService) SearchTasks(keyword string) ([]models.Task, error) {
    rows, err := s.db.Query(`
        SELECT id, title, description, status, due_date, created_at, updated_at, cost, currency
        FROM tasks
        WHERE title LIKE ? OR description LIKE ?`,
        "%"+keyword+"%", "%"+keyword+"%",
    )
    if err != nil {
        return nil, err
    }
    defer rows.Close()

    var tasks []models.Task
    for rows.Next() {
        var task models.Task
        err := rows.Scan(
            &task.ID, &task.Title, &task.Description, &task.Status,
            &task.DueDate, &task.CreatedAt, &task.UpdatedAt, &task.Cost, &task.Currency,
        )
        if err != nil {
            return nil, err
        }
        tasks = append(tasks, task)
    }
    return tasks, nil
}


func (s *TaskService) ExportTasks() ([]byte, error) {
    tasks, err := s.GetTasks()
    if err != nil {
        log.Printf("Error fetching tasks: %v\n", err) // Log the error
        return nil, err
    }

    log.Printf("Fetched %d tasks for export\n", len(tasks)) // Log the number of tasks

    var csvData bytes.Buffer
    writer := csv.NewWriter(&csvData)

    // Write CSV header
    writer.Write([]string{"ID", "Title", "Description", "Status", "Due Date", "Cost", "Currency"})

    // Write task data
    for _, task := range tasks {
        writer.Write([]string{
            strconv.Itoa(task.ID),
            task.Title,
            task.Description,
            task.Status,
            task.DueDate.Format("2006-01-02 15:04:05"),
            fmt.Sprintf("%.2f", task.Cost),
            task.Currency,
        })
    }

    writer.Flush()
    if err := writer.Error(); err != nil {
        log.Printf("Error writing CSV data: %v\n", err) // Log the error
        return nil, err
    }

    return csvData.Bytes(), nil
}

func (s *TaskService) BulkDeleteTasks(ids []int) error {
    if len(ids) == 0 {
        return fmt.Errorf("no task IDs provided")
    }

    query := "DELETE FROM tasks WHERE id IN ("
    for i, id := range ids {
        if i > 0 {
            query += ","
        }
        query += strconv.Itoa(id)
    }
    query += ")"

    log.Printf("Executing query: %s\n", query)

    _, err := s.db.Exec(query)
    if err != nil {
        log.Printf("Error executing query: %v\n", err)
        return err
    }

    return nil
}

Folder_6: static

File_8: index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Task Management System</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>
<body class="bg-gray-50">
    <!-- Navigation -->
    <nav class="bg-indigo-600 text-white shadow-lg">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex items-center justify-between h-16">
                <div class="flex items-center">
                    <i class="fas fa-tasks text-2xl mr-2"></i>
                    <span class="font-bold text-xl">Task Management System</span>
                </div>
                <div class="flex space-x-4">
                    <button onclick="showTab('create')" class="px-3 py-2 rounded-md hover:bg-indigo-500 transition">
                        <i class="fas fa-plus mr-2"></i>Create Task
                    </button>
                    <button onclick="showTab('view')" class="px-3 py-2 rounded-md hover:bg-indigo-500 transition">
                        <i class="fas fa-list mr-2"></i>View Tasks
                    </button>
                </div>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <!-- Create Task Section -->
        <div id="createSection" class="mb-8">
            <div class="bg-white rounded-lg shadow-md p-6">
                <h2 class="text-2xl font-bold mb-6 text-gray-800">
                    <i class="fas fa-plus-circle mr-2 text-indigo-600"></i>Create New Task
                </h2>
                <form id="createTaskForm" class="space-y-6">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Title</label>
                            <input type="text" id="title" 
                                class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500" 
                                required>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Due Date</label>
                            <input type="datetime-local" id="dueDate" 
                                class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500" 
                                required>
                        </div>
                        <div class="md:col-span-2">
                            <label class="block text-sm font-medium text-gray-700 mb-2">Description</label>
                            <textarea id="description" rows="3" 
                                class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500"></textarea>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Cost</label>
                            <input type="number" id="cost" step="0.01" 
                                class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500" 
                                required>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Currency</label>
                            <select id="currency" 
                                class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500">
                                <option value="USD">USD</option>
                                <option value="EUR">EUR</option>
                                <option value="GBP">GBP</option>
                                <option value="JPY">JPY</option>
                                <option value="INR">INR</option>
                            </select>
                        </div>
                    </div>
                    <div class="flex justify-end">
                        <button type="submit" 
                            class="bg-indigo-600 text-white px-6 py-2 rounded-md hover:bg-indigo-700 transition flex items-center">
                            <i class="fas fa-save mr-2"></i>Save Task
                        </button>
                    </div>
                </form>
            </div>
        </div>

        <!-- View Tasks Section -->
        <div id="viewSection" class="hidden">
            <div class="bg-white rounded-lg shadow-md p-6">
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-2xl font-bold text-gray-800">
                        <i class="fas fa-list-alt mr-2 text-indigo-600"></i>Task List
                    </h2>
                    <div class="flex space-x-4">
                        <select id="statusFilter" onchange="loadTasks()" 
                            class="px-4 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500">
                            <option value="">All Status</option>
                            <option value="pending">Pending</option>
                            <option value="completed">Completed</option>
                            <option value="in-progress">In Progress</option>
                        </select>
                        <button onclick="loadTasks()" 
                            class="bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600 transition flex items-center">
                            <i class="fas fa-sync-alt mr-2"></i>Refresh
                        </button>
                    </div>
                </div>
                <div id="tasksList" class="space-y-4"></div>
            </div>
        </div>

        <!-- Edit Task Modal -->
        <div id="editModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full">
            <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
                <div class="mt-3">
                    <h3 class="text-lg font-medium text-gray-900 mb-4">Edit Task</h3>
                    <form id="editTaskForm" class="space-y-4">
                        <input type="hidden" id="editTaskId">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Title</label>
                            <input type="text" id="editTitle" class="w-full px-4 py-2 border rounded-md">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Description</label>
                            <textarea id="editDescription" class="w-full px-4 py-2 border rounded-md" rows="3"></textarea>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Status</label>
                            <select id="editStatus" class="w-full px-4 py-2 border rounded-md">
                                <option value="pending">Pending</option>
                                <option value="in-progress">In Progress</option>
                                <option value="completed">Completed</option>
                            </select>
                        </div>
                        <div class="flex justify-end space-x-4">
                            <button type="button" onclick="closeEditModal()" 
                                class="bg-gray-300 text-gray-700 px-4 py-2 rounded-md hover:bg-gray-400 transition">
                                Cancel
                            </button>
                            <button type="submit" 
                                class="bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 transition">
                                Save Changes
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Notification Toast -->
    <div id="notification" class="hidden fixed bottom-4 right-4 px-4 py-2 rounded-md text-white"></div>

    <script>
        const API_URL = 'http://localhost:3090/api';

        // Show/Hide tabs
        function showTab(tab) {
            document.getElementById('createSection').classList.add('hidden');
            document.getElementById('viewSection').classList.add('hidden');
            
            document.getElementById(`${tab}Section`).classList.remove('hidden');
            if (tab === 'view') {
                loadTasks();
            }
        }

        // Load tasks
        async function loadTasks() {
            try {
                const statusFilter = document.getElementById('statusFilter').value;
                let url = `${API_URL}/tasks`;
                if (statusFilter) {
                    url += `?status=${statusFilter}`;
                }
                
                const response = await fetch(url);
                const tasks = await response.json();
                displayTasks(tasks);
            } catch (error) {
                showNotification('Error loading tasks', 'error');
            }
        }

        // Display tasks
        function displayTasks(tasks) {
            const tasksListElement = document.getElementById('tasksList');
            tasksListElement.innerHTML = '';

            if (tasks.length === 0) {
                tasksListElement.innerHTML = `
                    <div class="text-center py-8">
                        <i class="fas fa-inbox text-4xl text-gray-400 mb-4"></i>
                        <p class="text-gray-500">No tasks found</p>
                    </div>`;
                return;
            }

            tasks.forEach(task => {
                const statusColors = {
                    'pending': 'bg-yellow-100 text-yellow-800',
                    'completed': 'bg-green-100 text-green-800',
                    'in-progress': 'bg-blue-100 text-blue-800'
                };

                const taskElement = document.createElement('div');
                taskElement.className = 'border rounded-lg p-6 hover:shadow-md transition';
                taskElement.innerHTML = `
                    <div class="flex justify-between items-start">
                        <div class="space-y-2">
                            <h3 class="text-lg font-semibold text-gray-800">${task.title}</h3>
                            <p class="text-gray-600">${task.description || 'No description'}</p>
                            <div class="flex items-center space-x-4">
                                <span class="text-sm text-gray-500">
                                    <i class="far fa-calendar mr-1"></i>
                                    ${new Date(task.due_date).toLocaleString()}
                                </span>
                                <span class="text-sm text-gray-500">
                                    <i class="fas fa-money-bill mr-1"></i>
                                    ${task.cost} ${task.currency}
                                </span>
                                <span class="text-sm ${statusColors[task.status] || 'bg-gray-100 text-gray-800'} px-2 py-1 rounded-full">
                                    ${task.status}
                                </span>
                            </div>
                        </div>
                        <div class="flex space-x-2">
                            <button onclick="openEditModal(${JSON.stringify(task).replace(/"/g, '&quot;')})" 
                                class="text-blue-600 hover:text-blue-800 transition">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button onclick="deleteTask(${task.id})" 
                                class="text-red-600 hover:text-red-800 transition">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                `;
                tasksListElement.appendChild(taskElement);
            });
        }

        // Create task form submission
        document.getElementById('createTaskForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const taskData = {
                title: document.getElementById('title').value,
                description: document.getElementById('description').value,
                due_date: new Date(document.getElementById('dueDate').value).toISOString(),
                cost: parseFloat(document.getElementById('cost').value),
                currency: document.getElementById('currency').value
            };

            try {
                const response = await fetch(`${API_URL}/tasks`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(taskData)
                });

                if (response.ok) {
                    showNotification('Task created successfully!', 'success');
                    document.getElementById('createTaskForm').reset();
                    showTab('view');
                } else {
                    showNotification('Error creating task', 'error');
                }
            } catch (error) {
                showNotification('Error creating task', 'error');
            }
        });

        // Edit Modal Functions
        function openEditModal(task) {
            document.getElementById('editTaskId').value = task.id;
            document.getElementById('editTitle').value = task.title;
            document.getElementById('editDescription').value = task.description;
            document.getElementById('editStatus').value = task.status;
            document.getElementById('editModal').classList.remove('hidden');
        }

        function closeEditModal() {
            document.getElementById('editModal').classList.add('hidden');
        }

        // Edit task form submission
        document.getElementById('editTaskForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const taskId = document.getElementById('editTaskId').value;
            const taskData = {
                title: document.getElementById('editTitle').value,
                description: document.getElementById('editDescription').value,
                status: document.getElementById('editStatus').value
            };

            try {
                const response = await fetch(`${API_URL}/tasks/${taskId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(taskData)
                });

                if (response.ok) {
                    showNotification('Task updated successfully!', 'success');
                    closeEditModal();
                    loadTasks();
                } else {
                    showNotification('Error updating task', 'error');
                }
            } catch (error) {
                showNotification('Error updating task', 'error');
            }
        });

        // Delete task
        async function deleteTask(taskId) {
            if (!confirm('Are you sure you want to delete this task?')) {
                return;
            }

            try {
                const response = await fetch(`${API_URL}/tasks/${taskId}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    showNotification('Task deleted successfully!', 'success');
                    loadTasks();
                } else {
                    showNotification('Error deleting task', 'error');
                }
            } catch (error) {
                showNotification('Error deleting task', 'error');
            }
        }

        // Show notification
        function showNotification(message, type) {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.className = `fixed bottom-4 right-4 px-4 py-2 rounded-md text-white ${
                type === 'success' ? 'bg-green-500' : 'bg-red-500'
            }`;
            notification.classList.remove('hidden');

            setTimeout(() => {
                notification.classList.add('hidden');
            }, 3000);
        }

        // Initialize the view
        showTab('create');
    </script>
</body>
</html>

File_9: .env
SENDGRID_API_KEY=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
EXCHANGERATE_API_KEY=945dfbe8eebb43ce96174a272a96a0cc
DB_USER=root
DB_PASSWORD=8370412
DB_HOST=localhost
DB_PORT=3306
DB_NAME=taskdb

File_10: go.mod
module task-management

go 1.21

require (
	github.com/go-sql-driver/mysql v1.7.1
	github.com/gorilla/mux v1.8.1
	github.com/joho/godotenv v1.5.1
	github.com/rs/cors v1.11.1
	github.com/sendgrid/sendgrid-go v3.16.0+incompatible
)

require (
	github.com/sendgrid/rest v2.6.9+incompatible // indirect
	github.com/stretchr/testify v1.10.0 // indirect
	golang.org/x/net v0.34.0 // indirect
)

File_11: go.sum
github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=
github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
github.com/go-sql-driver/mysql v1.7.1 h1:lUIinVbN1DY0xBg0eMOzmmtGoHwWBbvnWubQUrtU8EI=
github.com/go-sql-driver/mysql v1.7.1/go.mod h1:OXbVy3sEdcQ2Doequ6Z5BW6fXNQTmx+9S1MCJN5yJMI=
github.com/gorilla/mux v1.8.1 h1:TuBL49tXwgrFYWhqrNgrUNEY92u81SPhu7sTdzQEiWY=
github.com/gorilla/mux v1.8.1/go.mod h1:AKf9I4AEqPTmMytcMc0KkNouC66V3BtZ4qD5fmWSiMQ=
github.com/joho/godotenv v1.5.1 h1:7eLL/+HRGLY0ldzfGMeQkb7vMd0as4CfYvUVzLqw0N0=
github.com/joho/godotenv v1.5.1/go.mod h1:f4LDr5Voq0i2e/R5DDNOoa2zzDfwtkZa6DnEwAbqwq4=
github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=
github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
github.com/rs/cors v1.11.1 h1:eU3gRzXLRK57F5rKMGMZURNdIG4EoAmX8k94r9wXWHA=
github.com/rs/cors v1.11.1/go.mod h1:XyqrcTp5zjWr1wsJ8PIRZssZ8b/WMcMf71DJnit4EMU=
github.com/sendgrid/rest v2.6.9+incompatible h1:1EyIcsNdn9KIisLW50MKwmSRSK+ekueiEMJ7NEoxJo0=
github.com/sendgrid/rest v2.6.9+incompatible/go.mod h1:kXX7q3jZtJXK5c5qK83bSGMdV6tsOE70KbHoqJls4lE=
github.com/sendgrid/sendgrid-go v3.16.0+incompatible h1:i8eE6IMkiCy7vusSdacHHSBUpXyTcTXy/Rl9N9aZ/Qw=
github.com/sendgrid/sendgrid-go v3.16.0+incompatible/go.mod h1:QRQt+LX/NmgVEvmdRw0VT/QgUn499+iza2FnDca9fg8=
github.com/stretchr/testify v1.10.0 h1:Xv5erBjTwe/5IxqUQTdXv5kgmIvbHo3QQyRwhJsOfJA=
github.com/stretchr/testify v1.10.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=
golang.org/x/net v0.34.0 h1:Mb7Mrk043xzHgnRM88suvJFwzVrRfHEHJEl5/71CKw0=
golang.org/x/net v0.34.0/go.mod h1:di0qlW3YNM5oh6GqDGQr92MyTozJPmybPK4Ev/Gm31k=
gopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=
gopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=

file_12: main.go
package main

import (
    "log"
    "net/http"
    "strings"
    "task-management/config"
    "task-management/database"
    "task-management/handlers"
    "task-management/services"
    "github.com/gorilla/mux"
    "github.com/rs/cors"
)

func main() {
    // Load configuration
    cfg, err := config.LoadConfig()
    if err != nil {
        log.Fatal("Error loading config:", err)
    }

    // Initialize database
    db, err := database.InitDB(cfg.GetDBConnString())
    if err != nil {
        log.Fatal("Error connecting to database:", err)
    }
    defer db.Close()

    // Initialize services
    taskService := services.NewTaskService(db)
    emailService := services.NewEmailService(cfg.SendGridAPIKey)
    exchangeService := services.NewExchangeService(cfg.ExchangeRateAPIKey)

    // Initialize handler
    taskHandler := handlers.NewTaskHandler(taskService, emailService, exchangeService)

    // Set up router
    r := mux.NewRouter()

    // API routes
    api := r.PathPrefix("/api").Subrouter()

    // IMPORTANT: Route order matters! More specific routes must come first
    // Bulk operations and special endpoints
    taskRoutes := api.PathPrefix("/tasks").Subrouter()
    taskRoutes.HandleFunc("/bulk", taskHandler.BulkDeleteTasks).Methods("DELETE")
    taskRoutes.HandleFunc("/export", taskHandler.ExportTasks).Methods("GET")
    taskRoutes.HandleFunc("/search", taskHandler.SearchTasks).Methods("GET")

    // Regular CRUD operations
    taskRoutes.HandleFunc("", taskHandler.CreateTask).Methods("POST")
    taskRoutes.HandleFunc("", taskHandler.GetTasks).Methods("GET")
    taskRoutes.HandleFunc("/{id}/status", taskHandler.UpdateTaskStatus).Methods("PUT")
    taskRoutes.HandleFunc("/{id}", taskHandler.GetTaskByID).Methods("GET")
    taskRoutes.HandleFunc("/{id}", taskHandler.UpdateTask).Methods("PUT")
    taskRoutes.HandleFunc("/{id}", taskHandler.DeleteTask).Methods("DELETE")

    // Static files - should be last
    r.PathPrefix("/").Handler(http.FileServer(http.Dir("./static")))

    // Log all registered routes
    log.Println("Registered Routes:")
    err = r.Walk(func(route *mux.Route, router *mux.Router, ancestors []*mux.Route) error {
        path, err := route.GetPathTemplate()
        if err != nil {
            return err
        }

        methods, err := route.GetMethods()
        if err != nil {
            methods = []string{"*"}
        }

        log.Printf("Route: %-6s %s", strings.Join(methods, ","), path)
        return nil
    })

    if err != nil {
        log.Fatal("Error walking routes:", err)
    }

    // Add CORS middleware
    c := cors.New(cors.Options{
        AllowedOrigins: []string{"*"},
        AllowedMethods: []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
        AllowedHeaders: []string{"Content-Type", "Authorization"},
    })

    handler := c.Handler(r)
    
    log.Println("Server starting on :3090")
    log.Fatal(http.ListenAndServe(":3090", handler))
}

File_13: package-lock.json
{
  "name": "task-management",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {}
}
